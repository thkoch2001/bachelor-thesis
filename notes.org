* Gliederung

http://www.cs.uwaterloo.ca/~brecht/thesis-hints.html

  DVT
    Einführung, Motivation, Aufgabenstellung und Aufbau der Arbeit
    Darstellung der verwendeten Grundlagen
    Konzept und Lösungsidee
    Erläuterung des Entwurfs oder der Implementierung
    Zusammenfassung und Ausblick auf mögliche Erweiterungen
    Anhänge (optional)
    Literaturverzeichnis
    Index (optional)

Erfurt:
Titelseite
Zusammenfassung (deutsch) (1 Seite)
Abstract (englisch) (1 Seite)
Aufgabenstellung (1 Seite)
Ggf. Vorwort oder Danksagung
Inhaltverzeichnis (bis hierhin sollten die Seiten römisch nummeriert sein)
Einleitung (ca. 5% der Gesamtarbeit, beginnt mit Seite 1)
Stand der Wissenschaft und Technik (max. 40%)
Konzept (zusammen mit Umsetzung und Bewertung ca. 50%)
Umsetzung
Bewertung
Zusammenfassung und Ausblick (ca. 5%)
Literaturverzeichnis
Anhang
Selbstständigkeitserklärung




Herleitung der REST API

- Die Anforderungen an eine Groupware API werden anhand zweier existierender und
  weitverbreiteter APIs begründet: Card/CalDAV, OpenSocial.

- Allerdings sind diese APIs entweder komplexer als notwendig (C.*DAV) oder
  nicht restful (C.*DAV, OpenSocial). Außerdem wäre es natürlich schön, eine
  Schnittstelle zu haben, die beide Anwendungsfälle bedienen kann.

- Es wird gezeigt, dass AtomPub mit ein paar, meist bereits standardisierten
  Ergänzungen eine sinnvolle, resourcenorientierte Alternative zu C.*DAV,
  OpenSocial ist.

Vorstellung der Medientypen inkl. Hypermediaunterstützung

- Die ATOM Medientypen und Hypermediaunterstützung wurden bereits bei der API
  beschrieben.

- Darstellung vCard, xCard, PoCo. HyperMedia ist hier nicht mehr ganz so
  wichtig, weil diese Medientypen meist den Endpunkten der "discouvery route"
  bilden. Allerdings gibt es von diesen Medientypen Verweise auf in Beziehung
  stehende (related) Resourcen. Diese Verweise sind komplette URIs mit
  standartisierter Semantik, also REST konform.

- Diskussion der Problematik, dass viele Medientypen in XML definiert sind, aber
  viele Webentwickler JSON bevorzugen. Eine automatisierte Übersetzung von XML
  Schemas in JSON Schemas ist nicht möglich, also muss für alle XML Medientypen
  eine JSON Äquivalent manuel definiert werden.

- Darstellung semantically annotated HTML mit drei verschiedenen Formaten,
  Begründung der Formatauswahl. Vorschlag zur Implementierung mit einer
  Templateengine und automatisierten Erstellung der Microdata Strukturelemente

  Warum überhaupt annotated (X)HTML? Suchmaschinen, Semantischer Editor,
  Interpretierung durch Browser Extensions (Import in Adressbuch, Kalender),
  Serendipitous Reuse

- HTML Forms und ihre Einbettung in eine Hypermedia API:
  - Kein PUT/DELETE
  - universeller, nichtssagender Medientyp application/x-www-form-urlencoded
  - keine link-relation, um auf die Form zur Erstellung einer neuen Resource zu
    verweisen.

- Problematik des Updates mit nicht isomorphen Medientypen, Möglichkeiten, damit
  umzugehen

Implementierung und wiederverwendung von Komponenten

- Auf Basis von Jersey, weil empfohlen von Schneider2010 (Vergleich und
  Beurteilung von Java Frameworks für Web Services mit REST)

- Komplexität der Behandlung verschiedener Medientypen versteckt hinter
  "Resource" Klasse mit Hilfe von ResourceFacades

- Die Mächtigkeit der Resourceklasse ermöglicht dass der restliche Code,
  z.B. CollectionStorage sehr einfach gehalten werden kann.

- Das CollectionStorage Interface kann für verschiedene Storagetypen
  implementiert werden und ist auf das Konzept eines Updatefeeds spezialiesiert.

- Wiederverwendbare Komponenten:
  - ResourceFacades Framework inkl. Medientypspezifische Klassen zur Extraktion,
    Transformation v. Daten
  - ATOM Framework (z.B. Abdera)
  - Extrem hilfreich: Dependency Injection
  - JAX-RS überraschenderweise wenig hilfreich
  - Einige kleine Helferklassen, die Funktionalität von JAX-RS ersetzen oder
    besser zugreifbar machen

- Größtes Problem: Fehlende oder unzureichende Libraries zum Parsen, Bauen,
  Konvertieren der Medientypen. Erstellung und Pflege solcher Libraries ist eine
  langwierige Fleißarbeit.

  Gedanken zu Libraries für Medientypen: (macht das Sinn?)

  - Die Libraries müssen unbekannte Felder beibehalten um Vendorspezifische
    Erweiterungen nicht zu beschädigen und um Aufwärtskompatibel zu sein.

  - Das Schema des Datentyps sollte nicht durch Klassen oder Objectfelder
    bereits zur Compilezeit statisch festgelegt sein (hartcodiert) sondern erst
    dynamisch zur Laufzeit gebaut werden. Das reduziert den
    Implementierungsaufwand der Library und ermöglicht die Erweiterung des
    Schemas zur Laufzeit.
  
    Beispiele: 
    - ICal4J hat eine Java Klasse pro bekannter Property
    - Apache Shindig hat eine Objekteigenschaft pro bekanntem PoCo Feld

* Implementation Todos
** TODO SLUG Header
** TODO Wohin redirect nach delete/put?

* todos 
** Darstellung Confusing: PUT/GET on Media Entries, DELETE on Entries, shared ETAG
** TODO The abbreviation of the phrase "that is" is written "i.e.". It contains a period after the "i" and one after the "e". A comma is also usually required with is use. This is a sentence containing an example of how to use "that is" (i.e., this sentence is the example). Quite often it is enclosed in parentheses and you should avoid using it too often. 
** TODO Sektion über collection media types, besonders collection+json
** TODO Einleitungen und Zusammenfassungen für Sektionen und gesammt
** TODO PortableContacts beschreiben und mit vCard vergleichen
** TODO Implementierung und Beschreibung: vCard/PoCo/xCard/iCal mit den gleichen Mitteln in Java darstellen
** TODO Grundlagen beschreiben
  http://theamiableapi.com/2012/03/04/rest-and-the-art-of-protocol-design/
** TODO Was hat aufgehalten?
 Macht es Sinn in der Arbeit Punkte zu nennen, die bei dem Versuch der
 Implementierung hinderlich waren? Zumindest solche Punkte, wo einfach noch
 libraries für bestimmte Zwecke fehlen (erste Gruppe)?

 - active PoCo library?
 - no library to convert between vCard and PoCo
 - keine xCard/xCal library, vCal4j-vcard supports only version 3
 - no helper library to produce microdata
 - Abdera: keine Dokumentation, komplizierte Vererbungsbäume

 - Major updates of Jersey, Abdera shortly before release. Undesirable to start on the old versions.
 - Kolab undergoes a migration a migration of its underlying data format from its own proprietary kolab-xml to xCal/xCard
 - Java library to access Kolab zumindest im schlechten Zustand
 - Not possible to use Guice injection together with Jersey
 - Not possible to define empty paths in sub-resources
 - Jersey does not help to build URIs to resources when the path to those URIs
   is not defined on the Resource class, limited URI building capabilites of
   Jersey

* TODO Einpassung in die vorgeschlagene Struktur für Abschlußarbeiten

 - http://www.fernuni-hagen.de/dvt/studium/richtlinien.shtml

 - Die schriftliche Ausarbeitung enthält üblicherweise:

   - Einführung, Motivation, Aufgabenstellung und Aufbau der Arbeit
     - TODO Aufgabenstellung

   - Darstellung der verwendeten Grundlagen
     Ich verwende: 
     - Atom Syndication
     - Atom Publishing Protocol
     - Atom extensions: Pagination, deleted entry
     - HTTP etags for offline work
     - HTTP Delta encoding with Feed
     - OpenSearch: plain text, time range
     - Microdata
     - vCard, iCal, xCard, xCal
     - Portable Contacts
     - evtl. Jersey, Abdera darstellen? 

     Wie detailiert sollen Dinge dargestellt werden, die in der zitierten
     Literatur eigentlich detailiert dargestellt sind? Bis in welche Tiefe
     verwendete Dinge darstellen? HTTP und Java müssen wohl nicht erläutert
     werden.

   - Konzept und Lösungsidee
     - AtomPub verwenden
     - Atom Categories als "marker" zur Typisierung von Collections
     - OpenSearch als Ersatz für CardDav/CalDAV Reports    
     - Verzicht auf komplizierte Reports, da in den meisten Fällen eine volle
       Synchronisation der Collections zumutbar ist
     - Semantische Annotationen in Atom Entry Summaries verwenden statt
       Projektionen wie in CalDAV/CardDAV

   - Erläuterung des Entwurfs oder der Implementierung

   - Zusammenfassung und Ausblick auf mögliche Erweiterungen
     - Es wird gerade überlegt, PoCo zu einem isomorphen JSON Format für vCards
       auszubauen
     - PUT/DELETE/PATCH und etags für HTML forms wäre wünschenswert
     - automatisches generieren von semantischen Annotationen in HTML template
       engines
     - Verbreitung und Effektivität von RFC3229+Feed untersuchen, einen Standard
       schreiben

   - Anhänge (optional)
   - Literaturverzeichnis
   - Index (optional)

Bisher habe ich vor allem eine Zusammenstellung bereits bekannter Dinge und
Erläuterung, wie diese sinnvoll kombiniert werden können.

* Check der Aufgabenstellung

  Die drei Fragen habe ich zwischendurch immer wieder angeschnitten. Soll ich
  sie am Ende noch mal als individuelle Unterabschnitte zusammenfassen?

** welche Komponenten des Entwurfs können für die Unterstützung verschiedener Medientypen gemeinsam genutzt oder wiederverwendet werden?

** Hypermediaunterstützung der verschiedenen Formate

 Hier müsste ich noch mehr schreiben, denke ich:
 - Wie ist die Hypermediaunterstützung realisiert?

   Ein Hypermedia Link besteht mindestens aus dem Schema, dem Linkziel, und der
   Linksemantik. Diese ist in den Medientyp unterschiedlich realisiert.

   - in PoCo sagt einfach die Spec, wenn ein Textfeld ein Link sein soll
   - Die instant messenger links haben das Schema im "type" feld angegeben (AOL,
     MSN, Yahoo, XMPP, ...)
   - In HTML is auf Basis des Elements definiert, ob es einen Link
     representiert: a, link, object, img, video. Das rel attribut beschreibt die
     Semantik.
   - In vCard/iCal ist die Semantik durch das Property definiert, in dem der
     Link vorkommt: SOURCE, FBURL, PHOTO, GEO, SOUND
   - Es gibt aber in vCard auch ein RELATED property zu weiteren vCards, dass
     wiederum genauer semantisch bestimmt werden kann mit einer IANA Typregistry

 Macht es Sinn, eine Auflistung aller Linkfelder zu machen wie hier?

 - PoCo: values with URI strings in fields urls
   - emails (without mailto:)
   - ims (with the messenger protocol not specified by a scheme but in a
     separate type field)
   - photos
 - somo PoCo fields have values reflecting the relationship between the
   requesting, authenticated client and the contact represented by the PoCo
   representation: relationships, connected
 - vCard
   - SOURCE of directory information contained in the content type
   - FBURL: free-busy information
   - CALADRURI: calendar user address [RFC5545] to which a scheduling request
      [RFC5546] should be sent
   - CALURI: calendar associated with the object represented by the vCard,
     should point to iCal object. BUT: Could return Atom collection by conneg?
   - MEMBER: vCards can represent groups, MEMBER property links to members
   - RELATED: typed links to entities related to this vCard
   - links for PHOTO/IMPP(instant messaging)/GEO(uri format rfc5870)/LOGO/SOUND
   - URL: web sites related to this vCard
 - iCal
   - links to event participants
   - ... noch mehr TODO
 - Several extensions exists for iCal/vCard which may define additional links
 - Atom Service Document: links to collection, category documents, OpenSearch definitions
 - Atom feeds
   - Pagination links
   - links to full media entry representations
 - HTML
   - the semantik of links in PoCo/vCard/iCal is defined by the field (property) where they appear.

** Wie viel muss ein Client vorher wissen?

 - Standard
   - Der Client muss die Medientypen verstehen, inkl. OpenSearch, PoCo
   - Der Client muss die zur semantischen Annotation verwendeten Schemata kennen 
   - Noch kein Standard, aber bald: Atom deleted entry
   - Der Client muss alle weiteren genutzten IETF bzw. W3C standards implementieren
 - Keine Standards
   - Der Client muss eine link relation auf eine HTML Form zum Anlegen neuer Resourcen kennen
   - Der Client muss die zur typisierung von Collections verwendeten Atom Categories verstehen

* Persistency for Groupware Data
Relational Databases vs. NoSQL databases vs. plain files

Relational databases are not practical for contacts, events or todos. Common patterns in systems that use relational DBs for that purpose:
\begin{itemize}
\item artificial limits of entries, e.g. only 3 email addresses per contact, because there are only three columns email1, email2 and email3.
\item Fields for custom data like custom1 to customX
\item EAV pattern: tables like: id, foreign\_id, type, value
\end{itemize}
\section{Synchronizing a large collection}

* Design
\section{Design}

% The design must not support any possible use case but only restful web applications.

% The life cycle of ResourceHandlers is for the application. They receive the called URL as part of the request context as a method parameter.
% ResourceHandlers could be wired together at run time, instantiated with a set of handler functors which could carry their storage in their closure.
% Specifying the media types handled by a handler function as annotations is verbose. If I have a method that handles contacts, I need to specify several media types. If a method handler can handle Contacts, Events and Todos, I need to repeat a lot of media types.

% Handler functors return a tuppel of status code, headers set and response body.
% Alternatively they can return early by throwing a special exception carrying a status code and a message.
% Exceptions thrown from a ResourceHandler should be serialized in a way easily to consume for the client.

% Concerns: Authorization, Logging, Trigger Message (to indexing system, subscribers), Measure execution time, Support Cross-Origin Resource Sharing (CORS)\footnote{\citeurl{http://www.w3.org/TR/cors/}{2012-2-2}}, Compression

% The life cycle of a CollectionStorage is across individual requests to facilitate caching or database connection reuse.

* Synchronization

Portable Contacts has a filter ``updatedSince''.

How is synchronization done in CardDAV?

* Media Types

\section{Media Types}
% http://amundsen.com/hypermedia/
% http://martinfowler.com/articles/richardsonMaturityModel.html
% http://code.google.com/p/implementing-rest/wiki/RMM
% http://looselyconnected.wordpress.com/2011/03/09/the-richardson-maturity-model-of-rest-and-roy-fielding/

% W3C note: coneg could forward with 302 to a specific representation like http://example.com/people/joe_smith.vcf 
% \cite[sec. 2.1]{Sauermann2008}

\begin{quote}
  To some extent, people get REST wrong because I failed to include enough
  detail on media type design within my dissertation.~--~Roy T. Fielding, \cite{Fielding2008}
\end{quote}

\cite[sec. 7.2]{Pautasso:2008:RWS:1367497.1367606} identifies the support of different media types as an issue that "can complicate and hinder the interoperability" and "requires more maintenance effort".

\cite{Davis:2011:XTR:1967428.1967437} proposes a XML based REST framework that uses XForms, XQuery, XProc, XSLT and an XML database. It can benefit from the constraint that it only supports XML based media types. It is to be seen, which ideas from this work could be reused in the case of a broader variety of supported media types.

\subsection{Syntax vs. Semantic (Vocabulary)}

The use of standardized media types is one key difference between an API and a
restful API\cite[sec. 5.2.1.2]{Fielding2000}. Only if the client has knowledge
about the media type can it do something meaningful with it besides just
receiving it. In that sense, the often used mime types application/xml or
application/json are not really media types. They don't tell the browser or user
anything meaningful beside the \emph{syntax} of the data.\footnote{
\citeurl{http://blog.programmableweb.com/2011/11/18/rest-api-design-putting-the-type-in-content-type}{2011-21-20}
and Web Resource Modeling Language \citeurl{http://www.wrml.org}{2011-12-20} both by Mark Massé
}

To do anything meaningful with plain json or xml, the client programmer must
normally look up the meaning or \emph{semantic} of the data in the API
documentation. The data therefor fails the self-descriptive constraint of
REST.

Compare this with a mime type like \texttt{application/atom+xml}. It specifies
the syntax (xml) and the semantic (atom) of the data. Of course somebody once
needed to read the atom specification and program the client with the knowledge
of how to process this media type. The purpose of standardized media types
however is that their number is limited enough so that there is a fair chance
that a client might have implemented a given media type.

Large sites like Google, Facebook or Twitter have the market power to attract
developers to read their specifications and program clients accordingly. They
thus don't necessary need to rely on standardized media types. REST however
envisions a decentralized web in which parties can interact without previous
knowledge of each other. This becomes possible through the usage of well known
predefined media types.

%  in the area of semantic
% standardization. Questions whether and how contact information should also hold
% space for the place of birth and place and date of death of a
% person\footnote{\citeurl{https://datatracker.ietf.org/doc/draft-ietf-vcarddav-birth-death-extensions/}{2011-12-20}}
% are independent from a data serialization format. So is the question whether and
% how to specify the sex or gender of a
% person.\footnote{\citeurl{http://www.ietf.org/mail-archive/web/vcarddav/current/msg01778.html}{2011-12-20}}

\subsubsection{XML vs. JSON}

% Data Meta Models http://dret.net/netdret/docs/wilde-cacm2008-document-design-matters/

This section investigates the two most common syntaxes used by media types
and the issues that arise if an application needs to support both of them.

The application section of the IANA mime type registration has 294 entries
ending in ``+xml'' and only 3 ending in
``+json''.\footnote{\citeurl{http://www.iana.org/assignments/media-types/application/index.html}{2011-12-20}}
This stands in contrast to the rise of public JSON APIs and the decline of XML
APIs.\footnote{\citeurl{http://blog.programmableweb.com/2011/05/25/1-in-5-apis-say-bye-xml/}{2011-12-20} \citeurl{http://www.readwriteweb.com/cloud/2011/03/programmable-web-apis-popping.php}{2011-12-21}}

%Web developers often prefer JSON over XML because it is perceived as easier to
%parse, process and smaller in size. XML in comparison is seen as complicate,
%slow to process and larger in size. - keine Quellen
A strong argument for JSON as the preferred format for public APIs may be that
JSON is a subset of JavaScript and thus easily consumable in a web
browser.\footnote{ECMAScript for XML (E4X) makes XML a first class language
  construct in the browser but is only supported by Mozilla
  \citeurl{http://en.wikipedia.org/wiki/ECMAScript_for_XML}{2012-2-2}}

A drawback of this mismatch between the preference of media type designers and
API consumers is a possible duplication of work and incompatibilities across
different APIs. An author that wants to offer a public API as JSON is likely to
find only an existing XML media type, but no one in JSON.  The situation would
be eased, if a standard mapping from XML schemes to JSON would be possible, but
that is not the case.

Instead, possible mappings have to trade of the preservation of all structural
information against the ``friendliness'' of the resulting JSON
structure\cite{Boyer2011}. Without going into detail, a JSON structure can be
seen as friendly if it makes best use of JSON's data types, is compact and easy
to process. \autoref{fig:waysmapxmljson} shows two different examples how to map
data from XML to JSON with one of them using JSON number values, being more
compact and probably easier to process.

\begin{multicols}{3}
\begin{lstlisting}[label=fig:waysmapxmljson,
                  captionpos=t,
                  caption={XML fragment}, frame=single]
<lang pref="1"
      id="fr" />
<lang pref="3"
      id="en" />
\end{lstlisting}
\columnbreak
\begin{lstlisting}[title={unfriendly JSON}, frame=single,
                  captionpos=t
]
"languages": [
  { "id":"fr",
    "pref":"1" },
  { "id":"en",
    "pref":"3" }
]
\end{lstlisting}
\columnbreak
\begin{lstlisting}[title={friendly JSON}, frame=single,
                  captionpos=t
]
"languages": {
  "fr":1,
  "en":3
}
\end{lstlisting}
\end{multicols}

Activity Streams has avoided the misalignment of an official XML format and an unofficial JSON deviate by defining an XML (ATOM) and JSON format from the beginning.\footnote{\citeurl{http://activitystrea.ms/}{2012-01-21}}

%\subsubsection{Hypermedia Support in JSON}
%@TODO: discuss HAL







\begin{table}
  \begin{tabular}{l c c c c c}
    type of data & XML  & JSON                      & semantic          & microformat & comment \\
    Calendar     & xCal & Google calendar API       & \url{http://www.w3.org/TR/rdfcal} & hCalendar & other: iCalendar  \\
    Contact      & xCard & portable contacts, jCard & friend of a friend & hCard & other: vCard \\
    Resume       & HR XML &                          & Description of a Career & hResume & \\    
  \end{tabular}
  \caption{data in different formats}
  \label{tab:data-formats}
\end{table}


% Open-Xchange provides an (unrestful) HTTP/JSON API which is used by its
% javascript
% frontend.\footnote{\citeurl{http://oxpedia.org/index.php?title=HTTP_API}{2011-19-12}}
% The comprehensive documentation does not indicate whether the data structures
% for tasks, appointments, reminders and contacts were inspired by any
% standards. In any case the API documentation is a good example of the need for
% standard mime types in JSON format. The use case for this API also shows
% similarities to the use of OpenSocial for intranet frontends.
\subsection{Media Type conversion}

Is conneg (content negotiation) useful?
No: Norman Walsh, 2003, it can lead to hard to debug bugs\citeurl{http://norman.walsh.name/2003/07/02/conneg}{2011-1-9},
    Joe Gregorio, 2003,I can't communicate the mime type to request to a third service if I can only give an URI\citeurl{http://bitworking.org/news/WebServicesAndContentNegotiation}{2011-1-9}
Yes: Jerome Louvel, 2006, I could additionally provide URIs that override the accept headers with query parameters like ?format=json.\citeurl{http://blog.noelios.com/2006/11/15/reconsidering-content-negotiation/}{2011-1-9}
    
\begin{quote}
  No single data representation is ideal for every client. This protocol defines representations for each resource in three widely supported formats, JSON [RFC4627], XML, and Atom [RFC4287] / AtomPub [RFC5023], using a set of generic mapping rules. The mapping rules allow a server to write to a single interface rather than implementing the protocol three times.
\end{quote}\cite[Core API Server]{OSSpec2.0.1}

% microformats to json converter \url{http://microformatique.com/optimus/}

In 2007, a project called microjson wanted to standardize json representations of microformat data structures.\footnote{\citeurl{http://notizblog.org/2007/09/16/microjson-microformats-in-json/}{2011-12-19}} 

The project identified the need for a json schema:\footnote{\citeurl{http://web.archive.org/web/20080524003749/http://microjson.org/wiki/Schemas}{2022-12-19}}
\begin{quote}
  If there are standard microJSON formats for transfer of certain datasets, there will be a need to validate that data to ensure that it is infact valid format. To validate a format you need something that details the structure, data content types and required data. Sounds like we'll be needing a schema for each microJSON format. 
\end{quote}


jCard example from microjson.org\footnote{\citeurl{http://web.archive.org/web/20080517003233/http://microjson.org/wiki/JCard}{2011-12-19}}
\begin{lstlisting}
{
"vcard":{
  "name":{
    "given":"John",
    "additional":"Paul",
    "family":"Smith"
  },
  "org":"Company Corp",
  "email":"john@companycorp.com",
  "address":{
    "street":"50 Main Street",
    "locality":"Cityville",
    "region":"Stateshire",
    "postalCode":"1234abc",
    "country":"Someplace"
  },
  "tel":"111-222-333",
  "aim":"johnsmith",
  "yim":"smithjohn"
}
\end{lstlisting}

\subsection{Example: vCard}

\begin{lstlisting}
   <?xml version="1.0" encoding="UTF-8"?>
   <vcards xmlns="urn:ietf:params:xml:ns:vcard-4.0">
     <vcard>
       <fn><text>Simon Perreault</text></fn>
       <n>
         <surname>Perreault</surname>
         <given>Simon</given>
         <additional/>
         <prefix/>
         <suffix>ing. jr</suffix>
         <suffix>M.Sc.</suffix>
       </n>
       <bday><date>--0203</date></bday>
       <anniversary>
         <date-time>20090808T1430-0500</date-time>
       </anniversary>
       <gender><sex>M</sex></gender>
       <lang>
         <parameters><pref><integer>1</integer></pref></parameters>
         <language-tag>fr</language-tag>
       </lang>
       <lang>
         <parameters><pref><integer>2</integer></pref></parameters>
         <language-tag>en</language-tag>
       </lang>
       <org>
         <parameters><type><text>work</text></type></parameters>
         <text>Viagenie</text>
       </org>
       <adr>
         <parameters>
           <type><text>work</text></type>
           <label><text>Simon Perreault
   2875 boul. Laurier, suite D2-630
   Quebec, QC, Canada
   G1V 2M2</text></label>
         </parameters>
         <pobox/>
         <ext/>
         <street>2875 boul. Laurier, suite D2-630</street>
         <locality>Quebec</locality>
         <region>QC</region>
         <code>G1V 2M2</code>
         <country>Canada</country>
       </adr>
       <tel>
         <parameters>
           <type>
             <text>work</text>
             <text>voice</text>
           </type>
         </parameters>
         <uri>tel:+1-418-656-9254;ext=102</uri>
       </tel>
       <tel>
         <parameters>
           <type>
             <text>work</text>
             <text>text</text>
             <text>voice</text>
             <text>cell</text>
             <text>video</text>
           </type>
         </parameters>
         <uri>tel:+1-418-262-6501</uri>
       </tel>
       <email>
         <parameters><type><text>work</text></type></parameters>
         <text>simon.perreault@viagenie.ca</text>
       </email>
       <geo>
         <parameters><type><text>work</text></type></parameters>
         <uri>geo:46.766336,-71.28955</uri>
       </geo>
       <key>
         <parameters><type><text>work</text></type></parameters>
         <uri>http://www.viagenie.ca/simon.perreault/simon.asc</uri>
       </key>
       <tz><text>America/Montreal</text></tz>
       <url>
         <parameters><type><text>home</text></type></parameters>
         <uri>http://nomis80.org</uri>
       </url>
     </vcard>
   </vcards>
\end{lstlisting}

\begin{lstlisting}
   <?xml version="1.0" encoding="UTF-8"?>
   <vcards xmlns="urn:ietf:params:xml:ns:vcard-4.0">
     <vcard>
       <fn><text>Simon Perreault</text></fn>
       <n>
         <surname>Perreault</surname>
         <given>Simon</given>
         <suffix>ing. jr</suffix>
         <suffix>M.Sc.</suffix>
       </n>
       <bday day="02" month="03" />
       <anniversary format="date-time">20090808T1430-0500</anniversary>
       <gender>M</gender>
       <lang pref="1">fr</lang>
       <lang pref="2">en</lang>
       <org type="work">Viagenie</org>
       <adr type="work">
         <label>Simon Perreault
   2875 boul. Laurier, suite D2-630
   Quebec, QC, Canada
   G1V 2M2</label>
         <street>2875 boul. Laurier, suite D2-630</street>
         <locality>Quebec</locality>
         <region>QC</region>
         <code>G1V 2M2</code>
         <country>Canada</country>
       </adr>
       <tel>
         <type>work</type>
         <type>voice</type>
         <uri>tel:+1-418-656-9254;ext=102</uri>
       </tel>
       <tel>
         <type>work</type>
         <type>text</type>
         <type>voice</type>
         <type>cell</type>
         <type>video</type>
         <uri>tel:+1-418-262-6501</uri>
       </tel>
       <email type="work">simon.perreault@viagenie.ca</email>
       <geo type="work">
         <uri>geo:46.766336,-71.28955</uri>
       </geo>
       <key type="work">
         <uri>http://www.viagenie.ca/simon.perreault/simon.asc</uri>
       </key>
       <tz>America/Montreal</tz>
       <url type="home">
         <uri>http://nomis80.org</uri>
       </url>
     </vcard>
   </vcards>
\end{lstlisting}

** HFactor
Mike Amundsen defines a method to asses media types that he calls
``HFactor''.\footnote{\citeurl{http://amundsen.com/hypermedia/}{2011-12-21}} The
HFactor distinguishes different types of support for links and indicates which
of those are provided by a reviewed media type.

Amundsen did reviews of a couple of media types. Unfortunately these do not
include \texttt{vcard+xml} or \texttt{calendar+xml}. I'll try to identify the
HFactors of both here.

The different types of link support have two letter acronyms and fall in two
categories: Link support values, with the first letter ``L'' and Control data
support, first letter ``C''.

\begin{itemize}
\item Link Support for
  \begin{itemize}
  \item \texttt{LE} embedded links (HTTP GET)
  \item \texttt{LO} out-bound navigational links (HTTP GET)
  \item \texttt{LT} templated queries (HTTP GET)
  \item \texttt{LN} non-idempotent updates (HTTP POST)
  \item \texttt{LI} idempotent updates (HTTP PUT, DELETE) 
  \end{itemize}
\item Control Data Support to
  \begin{itemize}
  \item \texttt{CR} modify control data for read requests (e.g. \texttt{HTTP Accept-*} headers)
  \item \texttt{CU} modify control data for update requests (e. g. \texttt{Content-*} headers)
  \item \texttt{CM} indicate the interface method for requests (e.g. HTTP GET,POST,PUT,DELETE methods)
  \item \texttt{CL} add semantic meaning to link elements using link relations (e.g. HTML rel attribute)
  \end{itemize}
\end{itemize}

** Data Models of Media Types

TODO:
\begin{itemize}
\item Ein generelles Daten Modell wäre hilfreich, um alle Medien Typen darauf zu projezieren und mit einer solchen Projektion dann innerhalb der Applikation zu arbeiten (TODO Schreier: warum muss dass Datenmodell total allgemeingültig sein, reicht es nicht vielleicht auch für eine Domäne?)
\item Ein allgemeines Datenmodell könnte auch eine Hilfe sein als Zwischenschritt für Conversions zwischen Medientypen
\item Es gibt kein allgemeines, sinnvolles Datenmodell für alle Medientypen
\item Trotzdem können bestimmte hilfreiche Generalisierungen vorgenommen werden
  \begin{itemize}
  \item Die meisten Resourcen haben bestimmte generische Metadaten die entweder im Medientyp kodiert werden können oder mit dem Medientyp zusammen persistiert werden müssen
  \item Diese Metadaten finden sich auch in atom:entry wieder und sind: Autor, Updated, Titel, Summary, etag, id, name, links
  \item Transitional Links vs Structural Links: \url{http://java.net/projects/jax-rs-spec/pages/Hypermedia}
  \item Different categories of data: CSV, binary/plain text, large binary (video), tree (XML/JSON) (Referenz?)
  \end{itemize}
\end{itemize}

* Hypermedia in RESTful applications

% Hat Kolab Hypermedia links in Kontakten, wie soll es sein mit xCard?

% http://restpatterns.org/Articles/The_Hypermedia_Scale

% http://linkednotbound.net/2010/12/01/web-linking/
% it is not sufficient for
% data to simply contain URIs for it to be “linked”. There must be a
% specification of the format that identifies those URIs as links, and either
% defines the link semantics or how they can be determined. The link might be
% part of a generic link construct like the Atom and HTML <link> elements,
% referencing a relation from the link relation registry that provides the link
% semantics. Alternatively, the link semantics might be defined in the data
% format, as was the case in the “next” property from our example.

% REST has four architectural constraints:
% separation of resource from representation,
% manipulation of resources by representations,
% self-descriptive messages, and
% hypermedia as the engine of application state.

% http://amundsen.com/hypermedia/hfactor/

% Hypermedia as the engine of application state
% http://www.infoq.com/articles/mark-baker-hypermedia

\begin{quotation}
  The model application is therefore an engine that moves from one state to the next by examining and choosing from among the alternative state transitions in the current set of representations.
\end{quotation}\cite[sec. 5.3, p.103]{Fielding2000}

** Hypermedia in OpenSocial

Webfinger, e.g. get a profile picture from an email address

Danger: One can trigger na http request by sending an email.

* Dispatcher
\subsubsection{Dispatcher}
\label{sec:dispatcher}
The dispatcher selects the Java method (see \ref{sec:components-actions}) that
should handle the request. The selection can depend at least on the path
component of the requested URI, the media types accepted by the client as
indicated in the request's ACCEPT header and the HTTP verb.

Every project implementing JAX-RS\cite{JAX-RS1.1} needs to have some kind of
dispatcher component. The specification itself does not identify this
component. It does however specify the algorithm a dispatcher needs to follow
and a set of Java annotations which must be used to configure the
dispatch. These annotations (PATH, GET for the HTTP verb and Produces) are
demonstrated in listing \ref{fig:jaxrs-annotated-resource-example}.

\begin{javalisting}[label=fig:jaxrs-annotated-resource-example,
                   caption={Example of a JAX-RS annotated Resource class (by Marek Potociar)}]
@Path("atm/{cardId}")	
public class AtmResource {	
`  
  @GET 	
  @Path("balance")	
  @Produces("text/plain")	
  public String balance(@PathParam("cardId") String card,	
                        @QueryParam("pin") String pin) {	
    return Double.toString(getBalance(card, pin));	
  }
\end{javalisting}
 
Alternative approaches to configure the dispatcher are not designated by
JAX-RS. One possible alternative would be to expose an API to manually add
dispatch routes at runtime and remove the corresponding annotations from the
source code. 

This approach is indeed implemented e.g. by
Restlet\footnote{\citeurl{http://wiki.restlet.org/docs_2.1/13-restlet/27-restlet/326-restlet.html}{2012-2-6}},
Apache Wink\footnote{called ``Dynamic Resources''
  \citeurl{http://incubator.apache.org/wink/1.1/html/5.1 Registration and
    Configuration.html}{2012-2-7}} and probably others. Jersey 2.0 is also
expected to provide an API for the
dispatcher.\footnote{\citeurl{http://java.net/jira/browse/JERSEY-842}{2012-2-6}}:

Advantages of a dynamic dispatcher configuration would be:

% JAX-RS Path annotations can not take any non constant input, that's not known at compile time.
% Would be fine to use e.g. an enum of all known URI templates.

\begin{itemize}
\item The path under which a resource type is served is decoupled from the code
  defining the behavior of the resource. This could enable the reuse of resource
  classes or methods in other contexts.
\item The decision which media types can be consumed or produced may not depend
  solely on the resource class or method. A resource method may work on a domain
  specific data type and the set of supported media types may depend on the
  available converter between media types and the data type. A photo album for example
  resource may be able to consume any number of different image formats that
  a separate component can convert to an internal image representation.
\item The list of supported media types could be created programmatically. This
  enables reuse of set of equivalent media types or combination of media type
  categories for example to combine the sets of image, video and audio media
  types.
\item The concept of resource classes could be replaced altogether. The life
  cycle of a resource class in JAX-RS defaults to the request scope. During one
  request only one resource method is called. Resource methods therefor by
  default don't share state through resource class attributes. It would therefor
  be possible to bind individual functors to dispatcher routes and thus
  composing the equivalent of a resource class at runtime.
\end{itemize}

%@TODO:

The dispatching as defined in JAX-RS does not define any facility for a resource
method to decline its possibility to handle a method at runtime. Such a facility
could either be implemented by a boolean precondition method associated with the
resource method or by a special Exception type that would restart the request
dispatch but this time ignoring the method that threw the exception. If no
alternative request method could be found, the Exception would be propagated and
subsequently transformed into an appropriate error response.

Thus it would be possible to define generic and special purpose request methods
even for cases where the static JAX-RS dispatch algorithm does not provide
sufficient granularity.

While all this flexibility can provide many advantages it has to be kept in mind
how the framework can gather enough knowledge to still help by autogenerating
e.g. WADL documents and responses to HEAD and OPTION requests.

* Reusable Patterns and Components
%@TODO

% Reuse is of course in general a good thing. In the context of Model Driven
% Development (MDD) and code generation it is especially import to identify code
% that is general enough to be provided by a library of framework and does not
% need to be generated.

% Minimizing the generated code also minimizes the extend of drawbacks associated
% with code generation, most importantly conflicts between updates by the code
% generator and manual modification.

% We have a namespace at our disposal. HTTP suggests to interpret the path component of this namespace in a hierarchic way.
% The URI must be mapped to a resource, independent of the requested media type or HTTP verb. 
% It therefor makes sense to do the interpretation of the URI or the path independent from Media type or HTTP verb dispatch.

% wilde-fqas argues that feeds (collections) provide a general enough abstraction 

% Concerns regarding Media Types that needs to be implemented differently for each different Media Type:
% \begin{itemize}
% \item validate the Media Type
% \item provide accessors to read, write parts of the Media Type
% \item serialize, deserialize the whole Media Type
% \item converters to other formats
% \item accessors to common interfaces (projection), e.g. common generic resource attributes or common attributes of a contact
% \end{itemize}
% % Attributes of a resource could be virtual or derived, e.g. the size of an image is derived from the binary image data.
% % Images also contain additional data that could be exposed as attributes.


% Candidate areas for re-usability:
% \begin{itemize}
% \item link building, URL parsing
% \item HTML form building, parsing
% \item generic properties of resources, id
% \item resource types
% \item question to storage: does resource still match ETag? Has changed since?
% \item all links of a resource: Link: intern/extern/undefined, href, rel, title, text, media type
% \item bool function matchesMediaType(), getMediaType() auf WrappedEntry
% \item Prüfung, ob ein Update durchgeführt werden soll, gemäß ETAG, ifnotchanged
% \item Möglichkeit, DatenKlassen mit DatenTypen zu definieren wie in eZ Publish um automatische Views und Edit Ansichten zu ermöglichen.
% \item Creation of resources: POST to collection with SLUG Header, PUT to URI, normalization of SLUG Header
% \item Pagination (building and parsing of next and previous URIs, implementation of RFC5005), querying the collections entries provider with the correct parameters (offset, limit).
% \item Storage interface with transaction support. An application may for example need to notify an indexing component after some resource has been changed. -- No transaction support: Every action that must happen in a transaction together with the resource change must be handled by the storage layer, must be aware of the storage technologie.
% \end{itemize}

% Im Gegensatz zu Bildern, wie in \cite{Schreier:2011:MRA:1967428.1967434} können Kontakte komplett inline sein.

* Selection of components

Apache Shindig for Open Social, includes client tests

http://code.google.com/p/kolab-android/

https://evolvis.org/projects/kolab-ws/

http://packages.ubuntu.com/source/maverick/dovecot-metadata-plugin
https://launchpad.net/ubuntu/+source/dovecot-metadata-plugin/8-0ubuntu1

% Apache Felix, Jackrabbit, RESTeasy http://blog.tfd.co.uk/2011/11/25/minimalist/
% Scala Dispatch HTTP requests http://dispatch.databinder.net/Dispatch.html
% Scala JSON serialization https://github.com/debasishg/sjson
% ATOM http://abdera.apache.org/ http://www.ibm.com/developerworks/xml/library/x-atompp3/ http://www.ibm.com/developerworks/xml/library/x-tipatom4/index.html

% JSON: http://jackson.codehaus.org/ http://code.google.com/p/google-gson/
% http://microformats.org/wiki/org.microformats.hCard

% Universal ATOM client/server? http://code.google.com/p/dase/ (PHP/MySQL, Python client)
% https://github.com/arktekk/atom-client

% http://code.google.com/p/atombeat/ atombeat eXistDB, atompub, java, Uni Oxford, mostly written in XQuery, Spring based security
% http://atomserver.codehaus.org Adds non standard and not restful extensions (e.g. feed aggregation with special URLs) inspired by GData, expects a relational database
% more http://code.google.com/p/atomojo java atompub feed server on existDB 
% http://atomhopper.org 
% existDb has an own atompub impl http://exist-db.org/atompub.html


** REST framework

https://github.com/spray/spray/wiki REST Framework Scala, Akka
https://github.com/teamon/play-navigator better router for play framework

Jersey recommended by \cite{Kaiser2011} above Restfulie and RESTeasy because of maturity and flexibility.

% http://www.torsten-horn.de/techdocs/jee-rest.htm RESTful Web Services mit JAX-RS und Jersey

Jersey has a atompub-contact client/server example app.

Why not Jersey in the end?
\begin{itemize}
\item JAX-RS assumes, that Paths are defined on the classes that represent the resources.
  \begin{itemize}
  \item This couples the ``location'' of a resource to its implementation.
  \item This leads to copied code. Given an URL pattern like
    \verb:/{AUTHORITY}/{COLLECTION}/{ENTRY}:. In this case the resource classes
    for authority, collection and entry would each need to parse the authority
    section of the path.
  \item If paths are not defined on resource classes, it is not possible to make use of JAX-RS' capabilities of declarative hyperlink building (@REF annotation).
  \end{itemize}
\item The dispatch to a request handler method has in our case three orthogonal
  parameters: HTTP verb, Media type, path. It would be preferable to handle
  these parameters independent of each other. The only way to handle at least
  the path dispatch separately is with the help of sub resources. This still
  leaves HTTP verb and Media type to be handled together.

  The sub resource mechanism additionally suffers from the shortcoming that it does not allow to specify an empty path.\footnote{\citeurl{http://java.net/jira/browse/JERSEY-536}{2012-01-21}} This makes it impossible to return a sub resource and annotate a method that should handle the case that no additional path elements remain to be matched.

\item Debugging is hard. It's not trivial to find out, why Jersey did not select a request handler or provider as the developer intended.
\item Jersey's parameter injection can not be used together with a dependency injection framework like Guice or Spring.
\end{itemize}

Comments on Restlet:
\begin{itemize}
\item A couple of core classes of Restlet extend a class called Restlet whose
  purpose is only vaguely defined but the type inheritance does not correspond
  to an ``is-a'' relationship. This might indicate a questionable architecture
  of the framework.
\item Classes in Restlet are generally mutable. The Javadocs of several classes,
  e.g. org.restlet.Restlet and subclasses even come with a warning note but do
  not expose any information about the thread-safety of their methods:
  \begin{quote}
    Concurrency note: instances of this class or its subclasses can be invoked by several threads at the same time and therefore must be thread-safe. You should be especially careful when storing state in member variables. 
  \end{quote}
\item 
\end{itemize}

\subsection{VCard}

% http://sourceforge.net/projects/vcard4j is dead since 5
% years. http://sourceforge.net/projects/mime-dir-j forked and updated and is
% now also abandoned.
% http://sourceforge.net/projects/jpim/ dead since 2 years.
% active:
% http://code.google.com/p/android-vcard 
% http://sourceforge.net/projects/cardme/
% http://wiki.modularity.net.au/ical4j/index.php?title=VCard (easily extendable to XML, JSON)


ical4j 
best documented
best code
is used by 
most active
also supports icalendar
is immutable!!!

\section{Testing}
How to test the ReST/CardDAV interface?

% http://code.google.com/p/rest-client/
% http://bitworking.org/projects/apptestclient GUI based Atom Publishing Protocol Client
% 

% Jersey creates WADL documents for OPTION requests. http://wadl.java.net/ seems to provide clients

Portable Contacts test client at plaxo \url{http://www.plaxo.com/pdata/testClient}

\url{http://code.google.com/p/rest-assured/} \url{http://restfuse.com/}

* Standards
** Contacts / Persons

% http://schema.org/Person

% http://www.ibiblio.org/hhalpin/homepage/notes/vcardtable.html
\begin{description}[\breaklabel\setleftmargin{1ex}]

  \item[RFC 6450 vCard Format Specification]
    This document defines the vCard data format for representing and exchanging
    a variety of information about individuals and other entities (e.g.,
    formatted and structured name and delivery addresses, email address,
    multiple telephone numbers, photograph, logo, audio clips, etc.). This is
    the new version and obsoletes RFCs 2425, 2426, and 4770, and updates RFC
    2739.

  \item[RFC 6351 xCard: vCard XML Representation]
    This document defines the XML schema of the vCard data format. 

  % http://portablecontacts.net/draft-spec.html
  % http://docs.opensocial.org/display/OSD/Specs
  % http://docs.opensocial.org/display/OSD/Enterprise+OpenSocial+Extensions link to calendar!
  % Mozilla erwägt PoCo http://groups.google.com/group/mozilla.dev.webapi/browse_thread/thread/3bd36f73336ce783?pli=1
  % https://code.google.com/apis/contacts/docs/poco/1.0/developers_guide.html
  \item[Portable Contacts, OpenSocial] 
    Portable Contacts defines contact data structures and a ReST API. It has
    been integrated in the OpenSocial standard.

  % http://www.nuxeo.com/en/resource-center/Videos/Nuxeo-World-2011/Leveraging-Open-Social-within-the-Nuxeo-Platform
  % http://wiki.magnolia-cms.com/display/WIKI/Magnolia+OpenSocial+Container
  % http://www.zdnet.com/blog/hinchcliffe/opensocial-20-will-key-new-additions-make-it-a-prime-time-player-in-social-apps/1603
  % http://www.cmswire.com/cms/social-business/open-standards-the-future-of-opensocial-20-013335.php
  % http://docs.opensocial.org/display/OSD/List+of+OpenSocial+Containers
  % http://www.informationweek.com/thebrainyard/news/industry_analysis/232200026
  % http://www.atlassian.com/opensocial/

  \item[Nepomuk Semantic Desktop Contact Ontology]

  % http://xmlns.com/foaf/spec/
  \item[Friend of a friend (FOAF)] 
    FOAF is a 

  % http://microformats.org/wiki/hcard
  \item[hCard]

  % http://microformats.org/wiki/jcard
  \item[jCard]

\end{description}

** Calendaring
%\subparagraph{IETF (RFC)}
\begin{description}[\breaklabel\setleftmargin{1ex}]

  \item[RFC 5545 Internet Calendaring and Scheduling Core Object Specification]

    iCalendar is the core data schema for calendaring information. This is the
    new version and obsoletes RFC2445

  \item[RFC 6321 xCal: The XML format for iCalendar]

    This specification defines a format for representing iCalendar data in
    XML. More specifically, is to define an XML format that allows iCalendar
    data to be converted to XML, and then back to iCalendar, without losing any
    semantic meaning in the data. Anyone creating XML calendar data according to
    this specification will know that their data can be converted to a valid
    iCalendar representation as well.

  \item[CalWS RESTful Web Services Protocol for Calendaring]

    This document, developed by the XML Technical Committee, specifies a RESTful
    web services Protocol for calendaring operations. This protocol has been
    contributed to OASIS WS-CALENDAR as a component of the WS-CALENDAR
    Specification under development by OASIS.

  % https://code.google.com/apis/calendar/v3
  \item[Google Calendar API V3]

    While not being a standard, the Google Calendar API is RESTful and will
    surely be implemented by many client applications. It's remarkable that the
    API supports partial GETs returning only specified fields and the HTTP PATCH
    verb to update only specified fields.

  % http://open-services.net/specifications/
  \item[Open Services for Lifecycle Collaboration (OSLC)]

    uses FOAF person \url{http://open-services.net/bin/view/Main/OSLCCoreSpecAppendixA?sortcol=table;up=#foaf_Person_Resource}

    provides change management, some overlapping to iCal TODOs \url{http://open-services.net/bin/view/Main/CmSpecificationV2}

    reference implementation: \url{http://eclipse.org/lyo}

\end{description}

** Scheduling

\begin{description}[\breaklabel\setleftmargin{1ex}]
  \item[RFC 5546 iCalendar Transport-Independent Interoperability Protocol (iTIP)] 

    Scheduling Events, BusyTime, To-dos and Journal Entries; Specifies
    the mechanisms for calendaring event interchange between calendar
    servers. This is the new version and obsoletes RFC2446

  \item[RFC 6047 iCalendar Message-Based Interoperability Protocol (iMIP)]

    Specifies how to exchange calendaring data via e-mail. This is the new
    version and obsoletes RFC2447.

\end{description}

** Relations and Links
% http://code.google.com/apis/socialgraph/
\begin{description}[\breaklabel\setleftmargin{1ex}]

  % http://gmpg.org/xfn/
  \item[Xhtml Friends Network (XFN)] 

    One of the relations returned by Google's webfinger.

  % https://datatracker.ietf.org/doc/draft-jones-appsawg-webfinger/
  \item[Webfinger]
    Webfinger in Firefox Contacts Add-On \url{http://mozillalabs.com/blog/2010/03/contacts-in-the-browser-0-2-released/}

  \item[RFC 6415 Web Host Metadata]

  % http://docs.oasis-open.org/xri/xrd/v1.0/xrd-1.0.html
  % http://en.wikipedia.org/wiki/XRDS
  % http://code.google.com/p/webfinger/wiki/CommonLinkRelations
  % http://hueniverse.com/category/discovery/
  \item[Extensible Resource Descriptor (XRD)] 

\end{description}

** out of scope
\begin{description}[\breaklabel\setleftmargin{1ex}]

  % LDIF for person info

  % http://www.hr-xml.org
  % http://de.wikipedia.org/wiki/HR-XML  
  \item[HR XML]

    The HR-XML Consortium is the only independent, non-profit, volunteer-led
    organization dedicated to the development and promotion of a standard suite
    of XML specifications to enable e-business and the automation of human
    resources-related data exchanges.

  % http://www.openmobilealliance.org/Technical/release_program/cab_v1_0.aspx
  \item[OMA Converged Address Book V1.0]

    Standard by the Open Mobile Alliance defining data structures and
    synchronization of contact data. It references vCard.
  
  % http://en.wikipedia.org/wiki/Open_Collaboration_Services
  \item[Open Collaboration Services]

    Also contains data structures for persons and events but does not reuse any
    known standard. See this thread:
    \url{http://lists.freedesktop.org/archives/ocs/2011-December/000136.html}

  % http://www.w3.org/TR/contacts-api
  \item[W3C Contacts API]

    A standard on how address books cold be accessed on devices or from
    JavaScript inside a Web Browser. The standard references vCard, OMA
    Converged Address Book and Portable Contacts.

  % http://www.w3.org/TR/vcard-rdf/
  \item[W3C vCard ontology]

  % http://www.w3.org/2000/10/swap/pim/contact
  \item[W3C PIM ontology]

\end{description}

* People, Groups and Organizations
% http://lists.w3.org/Archives/Public/public-device-apis/ - Contacts API
% 
% https://www.ietf.org/mailman/listinfo/calsify
% https://www.ietf.org/mailman/listinfo/ischedule - only 8 mails since 2009
% https://www.ietf.org/mailman/listinfo/httpmail only 3 mails since 2009
% https://www.ietf.org/mailman/listinfo/vcarddav
% https://www.ietf.org/mailman/listinfo/caldav
% https://www.ietf.org/mailman/listinfo/imap5

%http://groups.google.com/group/portablecontacts

%http://tech.groups.yahoo.com/group/rest-discuss

\paragraph{People}
\begin{description}[\breaklabel\setleftmargin{1ex}]

  \item[Eran Hammer-Lahav]
      \url{http://hueniverse.com}
      Yahoo!, OAuth

  \item[Eliot Lear <lear@cisco.com>]
      IETF Calsify WG chair

  \item[James Snell]
    \url{http://chmod777self.blogspot.com/}

    Apache Abdera committer, OpenSocial, IBM

  \item[Joseph Smarr]

    former Plaxo now Google
    presentation about portable contacts at vcarddav wg http://tools.ietf.org/agenda/74/slides/vcarddav-2.pdf
    http://josephsmarr.com
    http://anyasq.com/79-im-a-technical-lead-on-the-google+-team

  \item[Julian Reschke <julian.reschke@gmx.de>]
% Julian Reschke, WebDAV Experte, RFC 5995, greenbytes GmbH,Hafenweg 16, 48155 Münster , Germany

  \item[Lisa Dusseault]
      
    Lisa Dusseault is a development manager and standards architect at the Open
    Source Applications Foundation, where she's involved in the Chandler, Cosmo
    and Scooby projects. Previously, Lisa came from Xythos, an Internet startup
    where she was development manager for four years. She has also been an IETF
    contributor on various Internet applications protocols for eight years now,
    and continues to do this kind of work at OSAF. She co-chairs the IETF IMAP
    extensions and CALSIFY (Calendaring and Scheduling Standards Simplification)
    Working Groups. She is also the author of a book on WebDAV and co-author of
    CalDAV, an open and interoperable protocol for calendar access and sharing.

  \item[Mark Nottingham]
%  http://www.mnot.net/personal/

  \item[Mike Amundsen <mamund@yahoo.com>]
    \url{http://amundsen.com}

  \item[Mike Conley]

    \url{http://mikeconley.ca/blog/}
    % Email: mike.d.conley@gmail.com
    % Twitter: http://www.twitter.com/mike_conley
    % IRC: You can usually find me on Freenode as m_conley
    working on a new address book for Thunderbird: \url{https://wiki.mozilla.org/Thunderbird/tb-planning}

  \item[Peter Saint-Andre <stpeter@stpeter.im>]

    IETF Calsify WG area director

% http://notizblog.org/2011/11/17/the-long-term-failure-of-openweb/
\end{description}

* Implementations

% http://wiki.portablecontacts.net/w/page/17776143/Software%20and%20Services%20using%20Portable%20Contacts
% http://docs.opensocial.org/display/OSD/List+of+OpenSocial+Containers

% http://en.wikipedia.org/wiki/List_of_applications_with_iCalendar_support
% http://syncevolution.org/
% http://www.janrain.com/solutions/supported-networks
% http://code.google.com/p/caldav4j/
% http://www.webdav.org/projects/
% http://en.wikipedia.org/wiki/CardDAV
% webdav server http://milton.ettrema.com
% http://jackrabbit.apache.org/jackrabbit-webdav-library.html
% http://davmail.sourceforge.net/ Exchange GateWay using Jackrabbit
% http://en.wikipedia.org/wiki/List_of_applications_with_iCalendar_support
% Open Core: http://en.wikipedia.org/wiki/Open_core
% http://en.wikipedia.org/wiki/Groupware

** Servers
\begin{description}[\breaklabel\setleftmargin{1ex}]

  \item[Bedeworks]
    Java

  % http://en.wikipedia.org/wiki/Cyn.in
  \item[Cyn.in]
    Python, Open Core

  % http://www.davical.org/
  \item[DAViCal] 

    PHP, SQL storage, CalDAV, CardDav

  \item[eGroupWare]

  % http://en.wikipedia.org/wiki/EXo_Platform
  \item[eXo Platform]
    Open Core, Java, AGPL, participates in OpenSocial?

  % http://en.wikipedia.org/wiki/Group-Office
  \item[Group-Office]
    PHP, AGPL

  \item[Horde]

  % obm.org http://en.wikipedia.org/wiki/OBM_Groupware
  \item[OBM Groupware]
    PHP, GPL

  \item[Open-Xchange]
    Java, 
    In 2006 a Debian packaging attempt was canceled because upstream decided not to publish security updates for the open source version anymore.\footnote{\citeurl{http://web.archive.org/web/20100510133805/http://seraphyn.deveth.org/archives/10-Keine-Zukunft-in-der-freien-Version-von-Open-Exchange-auf-Debian.html}{2011-12-19}}

  % http://owncloud.org
  \item[owncloud]

    ownCloud supports syncing of calendar and contacts information via the
    CalDAV and CardDAV protocols.

  % http://en.wikipedia.org/wiki/Scalix
  \item[Scalix]
    Open Core
    Scalix Public License (SPL) based on MPL, requires to show the Scalix Logo

  % http://en.wikipedia.org/wiki/Simple_Groupware
  \item[Simple Groupware]
    PHP, GPL, SQL

  % http://en.wikipedia.org/wiki/SOGo
  \item[SOGo]
    CalDAV and CardDAV, written in Objective-C

  % http://en.wikipedia.org/wiki/Tiki_Wiki_CMS_Groupware
  \item[Tiki Wiki]
    PHP, SQL
    Contacts \url{http://doc.tiki.org/Contacts}, Calendar \url{http://doc.tiki.org/Calendar}
    iCal export
    apparently no CardDAV/CalDAV
    many many features!

  % http://en.wikipedia.org/wiki/Tine_2.0
  \item[Tine 2.0]
    Tine is not eGroupWare

  % http://en.wikipedia.org/wiki/Zarafa_%28software%29
  \item[Zarafa]
     PHP, MySQL
     IIRC it uses an Entity-Attribute-Value pattern to store its data in the relational db.

  % http://en.wikipedia.org/wiki/Zimbra
  \item[Zimbra]
    Open Core, Own license (Zimbra Public License),
    RFP since 2008 open: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=498316
    
\end{description}

** Clients

\begin{description}[\breaklabel\setleftmargin{1ex}]

  % http://en.wikipedia.org/wiki/Spicebird
  \item[Spicebird]
    built on top of Thunderbird with Calendar

  \item[Thunderbird]

    CardDAV via SoCO connector \url{http://www.sogo.nu/fr/downloads/frontends.html}

  \item[WebiCal]
   % http://code.google.com/p/webical/
     Java, YUI, Web frontend for a CalDAV server, uses iCal4J

  \item[Evolution, Evolution Data Server]
  \item[KDE Kontact, Akonadi]

  \item[more CardDAV] \url{http://wiki.davical.org/w/CardDAV/Clients} \url{http://en.wikipedia.org/wiki/CardDAV#Implementations}
  \item[more CalDAV]  \url{http://wiki.davical.org/w/CalDAV_Clients} \url{http://en.wikipedia.org/wiki/CalDAV#Implementations}

\end{description}


\subsection{Web Services}
% Google Calendar http://code.google.com/apis/calendar/caldav/

* Links

PortableContacts PoCo
http://wiki.portablecontacts.net/w/page/17776141/schema
http://portablecontacts.net/draft-schema.html
http://portablecontacts.net/draft-spec.html

PoCo typisch implementiert mit einer Klasse pro Attribut:
http://code.google.com/p/asmx-poco/source/browse/trunk/core/src/main/java/com/asemantics/poco/Entry.java


Java Halbuilder
https://github.com/talios/halbuilder


Scala XML nodes manipulation
http://stackoverflow.com/questions/4666717/scala-modify-a-nodeseq
http://stackoverflow.com/questions/970675/scala-modifying-nested-elements-in-xml


aloha vie vcard
https://getsatisfaction.com/aloha_editor/topics/use_aloha_vie_to_edit_contacts_vcard?utm_content=topic_link&utm_medium=email&utm_source=reply_notification


\begin{itemize}
\item \url{http://thesocialweb.tv}
\item \url{http://www.vogella.de/articles/REST/article.html} REST with Java (JAX-RS) using Jersey - Tutorial
\item \url{https://addons.mozilla.org/de/firefox/addon/restclient/}
\item \url{http://dataportability.org/} still active?
\item \url{http://tech.groups.yahoo.com/group/rest-discuss/messages/17242?threaded=1&m=e&var=1&tidx=1} REST and Semantic
\item \url{http://stackoverflow.com/questions/2669926/practical-advice-on-using-jersey-and-guice-for-restful-service}
\item \url{http://macstrac.blogspot.com/2009/01/jax-rs-as-one-web-framework-to-rule.html}
\item \href{http://keithp.com/blogs/calypso/}{Calypso — CalDAV/CardDAV/WebDAV for Android and Evolution}
\item \url{http://www.xfront.com/files/articles-1.html}
\item \url{http://buzzword.org.uk/swignition/uf}
\item \url{http://json-schema.org/}
\item \href{http://www.rddl.org/}{Resource Directory Description Language (RDDL)}
\item \url{http://blogs.oracle.com/sandoz/entry/jersey_and_abdera_with_a}  \url{http://weblogs.java.net/blog/mhadley/archive/2008/02/integrating_jer_2.html}
% http://exist.sourceforge.net/
% http://wiki.davical.org/w/CardDAV/Configuration/Well-known_URLs
% https://github.com/karl/monket-google-calendar A simplified UI for Google Calendar.
% Nuxeo switches from Python to Java: http://www.infoq.com/articles/nuxeo_python_to_java http://www.infoq.com/news/nuxeo-zope-java-migration
% JAXB Tutorial http://docs.oracle.com/cd/E17802_01/webservices/webservices/docs/1.6/tutorial/doc/JAXBWorks2.html
% XML Schema http://www.javaworld.com/javaworld/jw-08-2005/jw-0808-xml.html?page=2
% https://github.com/jaliss/securesocial provides OAuth, OAuth2 and OpenID authentication for Play Framework
% Oauth http://code.google.com/intl/de/apis/accounts/docs/OAuth2.html
% Permissions compared. IMAP, WEBDAV, ... http://chandlerproject.org/bin/view/Journal/LisaDusseault20040409
% Blog on calendar interop http://calendarswamp.blogspot.com

\end{itemize}

http://amundsen.com/media-types/phactor/format/

IANA link relations registry \url{http://www.iana.org/assignments/link-relations/link-relations.xml}

** linked data, microformats
 - http://www.w3.org/DesignIssues/LinkedData
 - http://manu.sporny.org/
 - http://dannyayers.com/2012/02/11/RDF-Hypermedia-is-Art
 - 

** ATOM
ATOM landscape overview \url{http://dret.typepad.com/dretblog/atom-landscape.html}
WebDAV vs. ATOM:
\url{http://intertwingly.net/wiki/pie/WebDav}
\url{http://intertwingly.net/wiki/pie/WebDavVsAtom}
google webdav atom
Why didn't ATOM succeed (more)? \citeurl{http://bitworking.org/news/425/atompub-is-a-failure}{2012-01-06}
% http://swordapp.org/

** XML and JSON

\begin{itemize}
\item \url{http://blog.jclark.com/}
\item \url{http://code.google.com/p/jaql/wiki/Builtin_functions#xml}
\item \url{http://www.webmasterworld.com/xml/3603303.htm}
\item \url{http://www.xml.com/pub/a/2006/05/31/converting-between-xml-and-json.html?page=3}
\item \url{http://goessner.net/download/prj/jsonxml/}
\item \url{http://www.w3.org/2011/10/integration-workshop/agenda.html}
\item \url{http://jsonml.org/}
\end{itemize}

** Apache Shindig
RPC vs. REST API for Shindig/OpenSocial: \url{http://groups.google.com/group/opensocial-and-gadgets-spec/browse_thread/thread/a4ddf7cd09f90237/5cfa1658e1c1d698?lnk=gst&q=rest#5cfa1658e1c1d698}, \url{http://groups.google.com/group/opensocial-and-gadgets-spec/browse_thread/thread/d1a5627fb6e686ce/d27d47dee92a87b2} One argument was support for batching. A restful batching proposal didn't get consensus: \url{https://docs.google.com/View?docid=dc43mmng_23fdbpp7hd&pli=1}

Flow of REST requests in Shindig \url{https://sites.google.com/site/opensocialarticles/Home/shindig-rest-java}

Google+ is likely to become OpenSocial enabled: \url{http://groups.google.com/group/opensocial-and-gadgets-spec/browse_thread/thread/1187241df6759a9a}

Shindig issues to implement OpenSocial 2.0 \url{https://docs.google.com/spreadsheet/ccc?key=0AihdZBncP3KzdGN3dVl3MFpIUlk2TXIyR3hfUDhHZUE&hl=en_US#gid=0}

How Shindig supports extensions: \url{https://cwiki.apache.org/confluence/display/SHINDIG/Arbitrary+Extensions+to+Apache+Shindig%27s+Data+Model}

Videos about some 2.0 OS features \url{http://groups.google.com/group/opensocial-and-gadgets-spec/browse_thread/thread/7b911edfb1bb3b4d}

OS and RDF \url{http://groups.google.com/group/opensocial-and-gadgets-spec/browse_thread/thread/20f62d627003509b}

OpenSocial Development Environment (OSDE, Eclipse Plugin)  \url{https://sites.google.com/site/opensocialdevenv}

\url{https://cwiki.apache.org/confluence/display/SHINDIG/Providing+your+own+data+service+implementation}

** Socialsite

Oracle's (former Sun's) extension to Apache Shindig. Blog \url{http://blogs.oracle.com/socialsite}


% Calendaring is not easy as can be seen by the impressive list of failed projects:
% http://www.hula-project.org/ 
% Dreaming in Code - Scott Rosenberg's software epic. about the chandler failure
% http://xmpp.org/extensions/xep-0054.html

% http://en.wikibooks.org/wiki/LaTeX/Glossary

* Stuff
scala rest frameworks

unfiltered
spray
play!
scalatra, http://bowlerframework.org/
Lift
http://www.decodified.com/spray/2011/03/31/introducing-the-spray-framework

http://code.google.com/p/implementing-rest/wiki/Crochet

rest allgemein
http://code.google.com/p/implementing-rest

Alternative zu AtomPub? http://en.wikipedia.org/wiki/Content_Management_Interoperability_Services
http://davmail.sourceforge.net - Gateway Standards to Exchange

http://code.google.com/p/caldav4j/

vCard
=====

http://microformats.org/wiki/vCard4


Restful versioning
http://www.mnot.net/blog/2011/10/25/web_api_versioning_smackdown
http://www.pacificspirit.com/blog/2004/06/14/protocol_extensibility_and_versioning

* Twitter Diskussion on WebDAV
@dret Erik Wilde 
@mamund Mike Amundsen 
@jreschke Julian Reschke 

http://twitter.com/#!/dret/status/109293361860575232
big day for vCard: new RFCs for #vCard (6350, rfc-editor.org/rfc/rfc6350.txt), #xCard (6351, rfc-editor.org/rfc/rfc6351.txt), #CardDAV (6352, rfc-editor.org/rfc/rfc6352.txt)

http://twitter.com/#!/dret/status/109326257736531969
there's #HTTP, there's #WebDAV on top, and now there's #CalDAV and #CardDAV. do we really need a specific protocol for each application?

http://twitter.com/#!/mamund/status/109327254835838977
RT @dret: "there's #HTTP, #WebDAV on top, now #CalDAV & #CardDAV. do we need specific protocol for each app.?" should be hypermedia types.

http://twitter.com/#!/dret/status/109335619385303040
@mamund wrt #WebDAV and #CalDAV: they invent new methods, which are not really something you can easily do by just adding new types. #REST

http://twitter.com/#!/mamund/status/109359241986449408
RT @dret: @mamund #CalDAV: invent[s] new methods..." CALDAV & CARDDAV == GET for props; better solution here: http://j.mp/ohwXzo #REST
http://amundsen.com/examples/fielding-props/

http://twitter.com/#!/mamund/status/109360022559002625
RT @dret: @mamund MKCALENDAR? meh! it's a PUT! now REPORT is a diff story but i still suspect a hypermedia definition could handle it. #REST

http://twitter.com/#!/dret/status/109410268060196864
@mamund @algermissen just to clarify: i don't think application-specific protocols such as #CardDAV and #CalDAV are a good way to go. #REST

http://twitter.com/#!/mamund/status/109418119101030400
RT @dret: @algermissen "i don't think app-specific protocols are good way to go." options: 1)protocol, 2)media-type, 3)URI. i pick 2) #REST

http://twitter.com/#!/dret/status/109451106236628992
@mamund i prefer to think of it as design patterns of solving common problems with (maybe new) media types and existing methods. #REST

http://twitter.com/#!/jreschke/status/109524446720688128
@mamund @dret MKCALENDAR actually is a app-specific MKCOL, not POST.

http://twitter.com/#!/jreschke/status/109523908260134912
@algermissen @dret @mamund @fielding It's cute but it fails to address the #1 reason why WebDAV did it differently....

http://twitter.com/#!/jreschke/status/109524053416615936
@algermissen @dret @mamund @fielding ...which is getting all props, getting a list of props, setting a list of props, etc.



* ResourceFacades

Requirements:

application/x-www-form-urlencoded actually doesn't specify a media type

application/calendar+xml; component="VEVENT"
application/calendar+xml; component="VTODO"

The media type alone is not sufficient to select an appropriate parser.

z.B. Kalender: getStartDate()

Optimierung:
@ResourceInterfaces(Class,Class,Class)

Resource.


Use cases:

- A Project items collection handler needs to check, whether a posted resource
  is a project resource, e.g. a Contact, Event, Todo item or Journal entry.

- An Adressbook collection handler needs to check whether a posted resource
  represents a contact.

- A Calendar collection wants to access the start and end date of a posted
  event.

- A textual representation should be extracted from a resource if possible to be
  submitted to an indexing service.

- It needs to be checked, whether the posted Resource can be transformed in a
  representation acceptable by the persistency component.

- Resources needs to be transformed either to a XML, JSON or relational
  representation for different persistency components.

Outlook:

A resource method could define all interfaces it needs by an annotation and the framework 

